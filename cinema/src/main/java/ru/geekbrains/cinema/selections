
drop table films;
drop table repertoire;
drop table tickets;


CREATE TABLE films (
                       id bigserial,
                       film_name varchar(255),
                       runningtime int,
                       primary key(id));

CREATE TABLE repertoire (
                            id bigserial,
                            film_id bigint references films(id),
                            beginning timestamp,
                            ticket_price money,
                            primary key(id));

CREATE TABLE tickets (
                         id bigserial,
                         repertoire_id bigint references repertoire(id),
                         row int,
                         seat int,
                         primary key(id));



insert into films(film_name, runningtime ) values
('Марафон желаний', '90'),
('Холодное сердце','90'),
('Союз спасения', '120'),
('Холоп',  '180'),
('Вторжение',  '180') ,
('Звезные войны',  '120');

insert into repertoire(film_id, beginning, ticket_price) values
(1, '2020-01-25 09:00', 100),
(2, '2020-01-25 11:00', 200),
(3, '2020-01-25 14:00', 200),
(5, '2020-01-25 15:00', 300),
(1, '2020-01-25 18:00', 300),
( 4, '2020-01-25 17:00', 700),
(6, '2020-01-25 16:00', 700),
(5, '2020-01-25 18:00', 100);;



INSERT INTO tickets (repertoire_id, row, seat) VALUES
(1,5,7), (1,5,8), (1,4,2), (2,4,5), (2,4,2), (2,6,8), (3,1,1),
(3,5,1), (3,6,7), (3,4,2), (4,5,8), (4,11,5), (4, 9, 2),
(4,10,6), (4,10,7), (5,1,2), (5,2,3);



-- SELECT
--     am.film_name, a.beginning, am.runningtime, bm.film_name, b.beginning, bm.runningtime
-- FROM
--     repertoire a INNER JOIN films am ON a.film_id = am.id,
--     repertoire b INNER JOIN films bm ON b.film_id = bm.id
-- WHERE a.id < b.id AND b.beginning < a.beginning + (am.runningtime::text||'minute')::INTERVAL
-- ORDER BY a.beginning;

-- SELECT
--     film_name, a.beginning, runningtime, b.beginning, b.beginning - a.beginning - (runningtime::text||'minute')::INTERVAL AS break
-- FROM
--     repertoire a INNER JOIN films ON a.film_id = films.id,
--     repertoire b
-- WHERE a.beginning < b.beginning
--   AND b.id IN
--       (SELECT id
--        FROM repertoire c
--        WHERE c.beginning > a.beginning
--        ORDER BY c.beginning - a.beginning asc limit 1)
--   AND b.beginning - a.beginning - (runningtime::text||'minute')::INTERVAL > interval '30 min'
-- ORDER BY break;



-- (SELECT
--      film_name AS film_name, count(*) AS tickets_sold, sum(ticket_price) AS total_box_office, avg(s.show_tickets) AS average_tickets_per_repertoire
--  FROM
--      tickets
--          INNER JOIN repertoire ON repertoire_id = repertoire.id
--          INNER JOIN films ON film_id = films.id
--          INNER JOIN (
--          SELECT
--              repertoire_id, count(*) AS show_tickets
--          FROM tickets st
--                   INNER JOIN repertoire ss ON st.repertoire_id = ss.id
--          GROUP BY repertoire_id) AS s ON s.repertoire_id = repertoire.id
--  GROUP BY films.id)
-- UNION
-- (SELECT
--      'Итого', count(*) AS tickets_sold, sum(ticket_price) AS total_box_office, avg(s.show_tickets) AS average_tickets_per_show
--  FROM
--      tickets
--          INNER JOIN repertoire ON repertoire_id = repertoire.id
--          INNER JOIN films ON film_id = films.id
--          INNER JOIN (
--          SELECT
--              repertoire_id, count(*) AS show_tickets
--          FROM tickets st
--                   INNER JOIN repertoire ss ON st.repertoire_id = ss.id
--          GROUP BY repertoire_id) AS s ON s.repertoire_id = repertoire.id
-- )
-- ORDER BY total_box_office ASC;

(SELECT
     count(*) AS number_of_visitors, sum(ticket_price) AS box_office, '9-15' AS time_interval
 FROM tickets INNER JOIN repertoire ON tickets.repertoire_id = repertoire.id
 WHERE date_part('hour', beginning) >= 9 AND date_part('hour', beginning) < 15
)
UNION
(SELECT
     count(*) AS number_of_visitors, sum(ticket_price) AS box_office, '15-18' AS time_interval
 FROM tickets INNER JOIN repertoire ON tickets.repertoire_id = repertoire.id
 WHERE date_part('hour', beginning) >= 15 AND date_part('hour', beginning) < 18
)
UNION
(SELECT
     count(*) AS number_of_visitors, sum(ticket_price) AS box_office, '18-21' AS time_interval
 FROM tickets INNER JOIN repertoire ON tickets.repertoire_id = repertoire.id
 WHERE date_part('hour', beginning) >= 18 AND date_part('hour', beginning) < 21
);
